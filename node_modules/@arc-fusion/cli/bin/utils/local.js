'use strict'

const path = require('path')
const { fileExists, readFile } = require('./promises')
const { existsSync, copyFileSync, unlinkSync } = require('fs')
const { execSync } = require('child_process')

const getEnvVariables = async (PROJECT_ROOT) => {
  const envPath = path.join(PROJECT_ROOT, '.env')
  if (!await fileExists(envPath)) {
    console.log('.env file was not found')
    return {}
  }
  return (await readFile(envPath))
    .toString()
    .split('\n')
    .reduce((obj, line) => {
      const [key, value] = line.split('=')
      if (key && value) obj[key] = value
      return obj
    }, {})
}

const getBlockVariables = async (PROJECT_ROOT) => {
  const blocksPath = path.join(PROJECT_ROOT, 'blocks.json')
  if (!await fileExists(blocksPath)) return false
  return require(blocksPath)
}

const normalizeBlockName = block => {
  // Strip versioning
  const packageName = block.split('@').slice(0, 2).join('@')
  // Strip org name
  const blockName = packageName.split('/').slice(1, block.length - 1).join('/')
  return {
    packageName,
    blockName
  }
}

const getLinkedThemeBlocks = async (themePath, blocksEnv, links, production) => {
  if (!themePath) return console.log('The THEME_BLOCKS_REPO variable was not found. Using production blocks')
  const { useLocal, blocks, devBlocks } = blocksEnv
  
  // Check flags
  if (links && production) return console.log('Unable to use both production and local blocks, using production blocks')
  if (production || (!useLocal && !links)) return console.log('Using production blocks')

  const npmrcSourcePath = path.resolve(themePath, '.npmrc')
  const linkBlocks = blocks => blocks
    .map(block => {
      const { packageName, blockName } = normalizeBlockName(block)
      const blockPath = path.resolve(themePath, 'blocks', blockName)
      if (!existsSync(blockPath)) return
      
      // Install dependencies for output types - for all other blocks, fusion will take care of the dependencies during build time
      if (blockName.includes('output')) {
        console.log(`--- Updating and installing dependencies for ${packageName}`)
        const npmrcDestPath = path.resolve(blockPath, '.npmrc')
        copyFileSync(npmrcSourcePath, npmrcDestPath)
        execSync('npm update', { cwd: blockPath })
        execSync('npm install', { cwd: blockPath })
        unlinkSync(npmrcDestPath)
      }
      return `${blockPath}:/opt/engine/bundle/linked_modules/${packageName}:ro`
    })
    .filter(v => v)
  const devLinks = typeof links === 'string' ? links.split(',') : []
  if (!devLinks.length && (!devBlocks || !devBlocks.length)) {
    console.log('--- Linking all blocks')
    return linkBlocks(blocks)
  }
  console.log('--- Linking only development blocks')
  return linkBlocks(devLinks.length ? devLinks : devBlocks)
}

const getLinkedEngineSdkBlock = (enginePath, blocksEnv) => {
  if (!enginePath) return console.log('The ENGINE_SDK_REPO variable was not found. Using production version')
  if (!existsSync(enginePath)) return console.log('The ENGINE_SDK_REPO variable points to an invalid location. Using production version')
  const { engineSDK } = blocksEnv
  if (!engineSDK) return console.log('No engine sdk specified in blocks.json')

  console.log('--- Linking engine sdk')
  const { packageName } = normalizeBlockName(engineSDK)
  return `${path.resolve(enginePath, 'src')}:/opt/engine/bundle/linked_modules/${packageName}:ro`
}

const getLinkedCssFrameworkBlock = (cssPath, blocksEnv) => {
  if (!cssPath) return console.log('The CSS_FRAMEWORK_REPO variable was not found. Using production version')
  if (!existsSync(cssPath)) return console.log('The CSS_FRAMEWORK_REPO variable points to an invalid location. Using production version')
  const { cssFramework } = blocksEnv
  if (!cssFramework) return console.log('No css framework specified in blocks.json')

  console.log('--- Linking css framework')
  const { packageName } = normalizeBlockName(cssFramework)
  return `${path.resolve(cssPath)}:/opt/engine/bundle/linked_modules/${packageName}:ro`
}

const getLinkedFusionRepo = (fusionPath, tag) => {
  if (!fusionPath) return console.log('The FUSION_REPO variable was not found. Using image')
  if (!existsSync(fusionPath)) return console.log('The FUSION_REPO variable points to an invalid location. Using image')

  console.log('--- Linking fusion repo')
  return [
    `${path.resolve(fusionPath, 'engine', 'environment')}:/opt/engine/environment:ro`,
    `${path.resolve(fusionPath, 'engine', 'src')}:/opt/engine/src:ro`,
    `${path.resolve(fusionPath, 'engine', 'webpack')}:/opt/engine/webpack:ro`
  ]
}

module.exports = {
  getEnvVariables,
  getBlockVariables,
  getLinkedThemeBlocks,
  getLinkedEngineSdkBlock,
  getLinkedCssFrameworkBlock,
  getLinkedFusionRepo
}
