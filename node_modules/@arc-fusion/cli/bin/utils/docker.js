'use strict'

const path = require('path')

const yamljs = require('yamljs')

const spawn = require('./spawn')

const {
  exec,
  mkdirp,
  touch,
  writeFile
} = require('./promises')

const { getEnvVariables } = require('./local')

const {
  ADMIN_RELEASE,
  FUSION_RELEASE,
  FUSION_ROOT,
  PROJECT_ROOT,
  REPO_NAME
} = require('../environment')

async function dockerList (op) {
  const { stdout: processes } = await exec(`docker ${op}`)
  return processes
    .split('\n')
    .slice(1)
}

function dockerComposeOp (op) {
  const cwd = PROJECT_ROOT
  return async function (name) {
    name = (name || '').replace(/^\.*/, '.').replace(/\.+$/, '');
    return spawn(
      'docker-compose',
      ['-f', path.join(PROJECT_ROOT, '.fusion', `docker-compose${name}.yml`)].concat(op || []),
      {
        cwd,
        env: {
          ...process.env,
          COMPOSE_PROJECT_NAME: `fusion${name ? `_${name}` : ''}`
        },
        stdio: 'inherit'
      }
    )
  }
}

const daemon = dockerComposeOp(['up', '-d'])
async function down (name) {
  return dockerComposeOp(['down', '-v'])(name);
}

async function dockerBuild (name) {
  const { FUSION_REPO } = await getEnvVariables(PROJECT_ROOT)
  return dockerComposeOp((!name && FUSION_REPO) ? 'build' : ['build', '--pull'])(name);
}

async function dockerPull (name) {
  return dockerComposeOp('pull')(name);
}

async function build (name) {
  // `docker-compose pull` updates all services that are image-based
  await dockerPull(name)
  // `docker-compose build --pull` updates the base FROM image for all services that are built
  return dockerBuild(name)
}

async function generate (name, options = {}) {
  await touch(path.join(PROJECT_ROOT, '.env'))
  await mkdirp(path.join(PROJECT_ROOT, '.fusion'))
  name = (name || '').replace(/^\.*/, '.').replace(/\.+$/, '')
  const props = {
    ADMIN_RELEASE,
    FUSION_ROOT,
    PROJECT_ROOT,
    REPO_NAME,
    ...options
  }

  const is20 = /^(2\.0\.|2\.0$)/i.test(FUSION_RELEASE)
  const dockerCompose = await require(`../../templates/${is20 ? '2.0/' : ''}docker-compose${name}.yml`)(props)

  return writeFile(path.join(PROJECT_ROOT, '.fusion', `docker-compose${name}.yml`), yamljs.stringify(dockerCompose, 10, 2))
}

async function run (name) {
  try {
    await generate(name)
    await down(name)
    await build(name)
    return await start(name)
  // } catch (e) {
  } finally {
    await down(name)
  }
}

async function start (name) {
  name = (name || '').replace(/^\.*/, '.').replace(/\.+$/, '');
  const operation = ['up']
  if (name) {
    operation.push('--abort-on-container-exit')
    operation.push(`--exit-code-from=${name.replace(/^\.*/, '')}`)
    operation.push('--remove-orphans')
  }
  return dockerComposeOp(operation)(name)
}

const stop = dockerComposeOp('stop')

module.exports = {
  build,
  daemon,
  dockerList,
  down,
  generate,
  run,
  start,
  stop
}
