'use strict'

const os = require('os')
const path = require('path')

const webpackDockerfile = require('./webpack.Dockerfile')
const getLinkedModules = require('./links')
const {
  getEnvVariables,
  getBlockVariables,
  getLinkedThemeBlocks,
  getLinkedEngineSdkBlock,
  getLinkedCssFrameworkBlock,
  getLinkedFusionRepo
} = require('../bin/utils/local')
const { mkdirp, writeFile } = require('../bin/utils/promises')

const isWindows = /^win/i.test(os.platform())

module.exports = async ({ ADMIN_RELEASE, PROJECT_ROOT, REPO_NAME, noAdmin, rebuild, links, production }) => {
  const environment = {
    DB_NAME: `\${DB_NAME:-${REPO_NAME}}`,
    MONGO_URL: `mongodb://data:27017/\${DB_NAME:-${REPO_NAME}}`,
    PB_MONGODB_URI: 'mongodb://data:27017',
    NODE_ENV: 'development',
    ENVIRONMENT: 'localhost',
    CONTEXT_PATH: `\${CONTEXT_PATH:-pf}`,
    DEBUG: `\${DEBUG:-'fusion:*'}`,
    HTTP_ENGINE: 'http://engine:8080',
    HTTP_RESOLVER: 'http://resolver:8080'
  }

  const networks = [
    'fusion'
  ]

  // get all modules linked via npm link
  const linkedModules = await getLinkedModules(PROJECT_ROOT) || {}
  const moduleLinks = Object.keys(linkedModules)
    .map((linkedModule) => `${linkedModules[linkedModule]}:/opt/engine/bundle/linked_modules/${linkedModule}:ro`)

  // check for local repos we need to link
  const env = await getEnvVariables(PROJECT_ROOT)
  const blocksEnv = await getBlockVariables(PROJECT_ROOT)
  let watchAll = false
  if (blocksEnv) {
    const linkedBlocks = await getLinkedThemeBlocks(env.THEMES_BLOCKS_REPO, blocksEnv, links, production) || []
    if (linkedBlocks.length) {
      watchAll = true
      moduleLinks.push(...linkedBlocks)
    }
    const engineSdk = getLinkedEngineSdkBlock(env.ENGINE_SDK_REPO, blocksEnv)
    if (engineSdk) {
      watchAll = true
      moduleLinks.push(engineSdk)
    }
    const cssFramework = getLinkedCssFrameworkBlock(env.CSS_FRAMEWORK_REPO, blocksEnv)
    if (cssFramework) {
      watchAll = true
      moduleLinks.push(cssFramework)
    }
  }
  const localFusionTag = 'local-washpost/fusion:latest'
  const fusionLinks = getLinkedFusionRepo(env.FUSION_REPO, localFusionTag) || []
  if (fusionLinks.length) {
    watchAll = true
    moduleLinks.push(...fusionLinks)
  }

  // filter out duplicates from links
  const uniqueLinks = [...new Set(moduleLinks)]

  // the node_modules volume trick to hide host files from the container causes an error if the directory does not exist
  await mkdirp(path.join(PROJECT_ROOT, 'node_modules'))

  await writeFile(
    path.join(PROJECT_ROOT, '.fusion', 'webpack.Dockerfile'),
    await webpackDockerfile({ PROJECT_ROOT, rebuild, localFusion: !!fusionLinks.length, themesVersion: env.BLOCK_DIST_TAG })
  )

  return {
    version: '3',

    networks: {
      fusion: {
        driver: 'bridge',
        external: false,
        internal: false
      }
    },

    services: {
      data: {
        image: 'washpost/mongo-vandelay',
        container_name: 'fusion-data',
        environment: {
          ...environment,
          RESTORE: 'true',
          SYNC: (isWindows) ? 'true' : ''
        },
        networks: {
          fusion: {
            aliases: [
              'db',
              'database'
            ]
          }
        },
        ports: [
          '27017:27017'
        ],
        volumes: [
          '../data/db:/data/db:rw',
          '../data/dumps:/data/dumps:rw',
          '../data/restore:/data/restore:rw'
        ]
      },

      'content-cache': {
        // memcached service runs from an image, so there is no Dockerfile
        image: 'memcached',
        // max size is 10MB
        command: 'memcached -I 10m',
        container_name: 'fusion-content-cache',
        networks
      },

      'cache-proxy': {
        image: `washpost/fusion-cache-proxy:\${FUSION_RELEASE:-latest}`,
        container_name: 'fusion-cache-proxy',
        depends_on: [
          'content-cache'
        ],
        networks,
        ports: [
          '9030:8080'
        ],
        environment: {
          CACHE_PROXY_CREDENTIALS: 'localhost:password',
          CACHE_NODES: 'content-cache:11211'
        }
      },

      webpack: {
        build: {
          context: '..',
          dockerfile: './.fusion/webpack.Dockerfile',
          args: {
            FUSION_RELEASE: fusionLinks.length ? localFusionTag : `\${FUSION_RELEASE:-latest}`
          }
        },
        restart: 'always',
        command: 'watch',
        container_name: 'fusion-webpack',
        ...(fusionLinks.length && { depends_on: ['engine'] }),
        env_file: [
          '../.env'
        ],
        environment: {
          ...environment,
          NODE_OPTIONS: `--max_old_space_size=${env.WEBPACK_HEAP_SIZE || '4096'}`,
          CACHE_PROXY_URL: 'http://localhost:password@cache-proxy:8080/cache',
          CACHE_PREFIX: '0803',
          WATCH: watchAll ? 'true' : null,
          POLL: null,
          // because we import ALL variables from .env, ignore PORT
          PORT: '8080'
        },
        network_mode: 'none',
        volumes: [
          '..:/opt/engine/bundle/src:ro',
          'babel:/opt/engine/bundle/src/node_modules:rw',
          'shared:/opt/engine/bundle/node_modules:rw',
          '../.fusion/babel:/opt/engine/bundle/babel:rw',
          '../.fusion/build:/opt/engine/bundle/build:rw',
          '../.fusion/dist:/opt/engine/bundle/dist:rw',
          '../.fusion/generated:/opt/engine/bundle/generated:rw',
          ...uniqueLinks
        ]
      },

      engine: {
        ...(fusionLinks.length && { build: path.resolve(env.FUSION_REPO, 'engine') }),
        image: fusionLinks.length ? localFusionTag : `washpost/fusion-engine:\${FUSION_RELEASE:-latest}`,
        restart: 'always',
        container_name: 'fusion-engine',
        depends_on: [
          'cache-proxy',
          'data'
        ],
        env_file: [
          '../.env'
        ],
        environment: {
          ...environment,
          NODE_OPTIONS: `--max_old_space_size=${env.ENGINE_HEAP_SIZE || '2048'}`,
          CACHE_PROXY_URL: 'http://localhost:password@cache-proxy:8080/cache',
          CACHE_PREFIX: '0803',
          // because we import ALL variables from .env, ignore PORT
          PORT: '8080'
        },
        networks,
        ports: [
          '9010:8080',
          '9229:9229'
        ],
        volumes: [
          '..:/opt/engine/bundle/src:ro',
          'babel:/opt/engine/bundle/src/node_modules:ro',
          'shared:/opt/engine/bundle/node_modules:ro',
          '../.fusion/babel:/opt/engine/bundle/babel:ro',
          '../.fusion/build:/opt/engine/bundle/build:ro',
          // need to be able to write skeleton scripts
          '../.fusion/dist:/opt/engine/bundle/dist:rw',
          ...uniqueLinks
        ]
      },

      resolver: {
        image: `washpost/fusion-resolver:\${FUSION_RELEASE:-latest}`,
        container_name: 'fusion-resolver',
        depends_on: [
          'data',
          'engine'
        ],
        environment: {
          ...environment,
          RESOLVE_FROM_DB: 'true', // should only be 'true' for local dev environments
          TRAILING_SLASH_RULE: null // Options are FORCE, DROP, or NOOP
        },
        networks,
        ports: [
          '9020:8080'
        ]
      },

      ...(
        (noAdmin)
          ? {}
          : {
            admin: {
              image: `washpost/pb-editor-api:\${PB_RELEASE:-${ADMIN_RELEASE}}`,
              container_name: 'fusion-admin',
              depends_on: [
                'data'
              ],
              environment: {
                ...environment,
                KAFKA_HOSTS: '',
                PORT: 8888
              },
              networks,
              ports: [
                '8888:8888'
              ],
            }
          }
      ),

      origin: {
        image: `washpost/fusion-origin:\${FUSION_RELEASE:-latest}`,
        container_name: 'fusion-origin',
        depends_on: [
          'engine',
          'resolver'
        ],
        environment: {
          ...environment,
          ...(
            (noAdmin)
              ? {}
              : {
                PB_ADMIN: 'http://admin:8888',
                PB_EDITOR: `http://\${PB_EDITOR:-beta}.pb-admin.aws.arc.pub`
              }
          ),
          DEFAULT_ARC_SITE: null,
          IS_ADMIN: 'true'
        },
        networks,
        ports: [
          `\${PORT:-80}:8080`,
          '8081:8081'
        ],
        volumes: [
          '../mocks:/opt/origin/mocks:ro',
          '../resources:/opt/origin/resources:ro',
          '../.fusion/dist:/opt/origin/dist:ro'
        ]
      }
    },

    volumes: {
      shared: null,
      babel: null
    }
  }
}
